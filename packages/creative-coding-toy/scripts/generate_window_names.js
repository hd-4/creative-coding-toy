import ts from "typescript";
import fs from "node:fs";
import { fileURLToPath } from "node:url";

const input_file = ts.createSourceFile(
	"input.ts",
	"type WindowNames = keyof typeof window",
	ts.ScriptTarget.Latest,
	false,
	ts.ScriptKind.TS
);

/** @return {ts.CompilerHost} */
function compiler_host() {
	const default_host = ts.createCompilerHost({});

	return {
		...default_host,
		getSourceFile: (name, languageVersion) => {
			if (name === input_file.fileName) return input_file;
			return default_host.getSourceFile(name, languageVersion);
		},
		writeFile() {}
	};
}

const program = ts.createProgram(
	["input.ts"],
	{ typeRoots: [], target: ts.ScriptTarget.ESNext },
	compiler_host()
);
const type_checker = program.getTypeChecker();

/**
 * @type {string[]}
 */
const members = [];

ts.forEachChild(input_file, (node) => {
	if (!ts.isTypeAliasDeclaration(node)) return;

	const type = type_checker.getTypeFromTypeNode(node.type);
	if (!type.isUnion()) throw new Error("Expected union type!");

	type.types.forEach((member) => {
		if (member.isStringLiteral()) members.push(member.value);
		else if (!(member.flags & ts.TypeFlags.Number))
			throw new Error("Unexpected union member!");
	});
});

members.sort();

const output_path = fileURLToPath(
	new URL("../src/exports/vite/window_names.js", import.meta.url)
);
fs.writeFileSync(
	output_path,
	`// This file was generated by a script. Do not modify it directly.

export const window_names = new Set(${JSON.stringify(
		members,
		undefined,
		2
	)})\n`,
	"utf-8"
);
